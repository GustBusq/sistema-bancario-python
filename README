# Sistema de Gerenciamento Banc√°rio Simples em Python üêç

## üìÑ Descri√ß√£o do Projeto

Este √© um sistema de gerenciamento banc√°rio em console desenvolvido em **Python**, projetado para simular opera√ß√µes banc√°rias b√°sicas. Ele permite o cadastro de clientes, realiza√ß√£o de dep√≥sitos, saques, transfer√™ncias entre contas, consulta de extratos e gera√ß√£o de relat√≥rios, com **persist√™ncia de dados em arquivo JSON**.

O projeto foi constru√≠do com foco em **Orienta√ß√£o a Objetos** para representar os clientes e suas contas, e incorpora **valida√ß√µes de entrada** robustas para garantir a integridade e seguran√ßa dos dados.

---

## ‚ú® Funcionalidades Principais

* **Cadastro de Clientes:**
    * Registre novos clientes com nome, CPF e telefone.
    * **Valida√ß√£o e formata√ß√£o autom√°tica de CPF** (formato `000.000.000-00`).
    * **Valida√ß√£o e formata√ß√£o de telefone** (para `(XX) XXXXX-XXXX` ou `(XX) XXXX-XXXX`).
    * Verifica√ß√£o de CPF duplicado para evitar cadastros repetidos.

* **Opera√ß√µes Banc√°rias:**
    * **Dep√≥sito:** Adicione fundos √† conta de um cliente.
    * **Saque:** Retire fundos da conta de um cliente, com verifica√ß√£o de saldo dispon√≠vel.
    * **Transfer√™ncia:** Mova fundos entre duas contas de clientes, com valida√ß√£o de saldo na conta de origem.

* **Consultas:**
    * Liste todos os clientes cadastrados.
    * Consulte detalhes de um cliente espec√≠fico pelo CPF.
    * Consulte o extrato completo de transa√ß√µes de um cliente.
    * Identifique clientes com saldo negativo.

* **Relat√≥rios e Estat√≠sticas:**
    * Exiba o total de saldo em caixa (soma dos saldos de todos os clientes).
    * Mostre o n√∫mero total de clientes cadastrados.
    * Gere um relat√≥rio completo de clientes em formato JSON.

* **Persist√™ncia de Dados:**
    * Os dados dos clientes s√£o automaticamente salvos em um arquivo `clientes.json` ao sair do sistema e carregados ao iniciar, garantindo que as informa√ß√µes n√£o sejam perdidas entre as sess√µes.

---

## üõ†Ô∏è Tecnologias Utilizadas

* **Python 3.x**
* **M√≥dulos Padr√£o do Python:**
    * `re` (Express√µes Regulares para valida√ß√£o e formata√ß√£o de CPF/telefone)
    * `datetime` (Manipula√ß√£o de datas e horas para registro do hist√≥rico de transa√ß√µes)
    * `json` (Leitura e escrita de dados de clientes em arquivos JSON)
* **Git** (Para controle de vers√£o)
* **GitHub** (Para hospedagem do c√≥digo e gerenciamento de projeto)

---

## üöÄ Como Executar o Projeto

Siga estes passos para configurar e rodar o projeto em sua m√°quina local:

1.  **Clone o Reposit√≥rio:**
    Abra seu terminal ou Git Bash e clone este reposit√≥rio:
    ```bash
    git clone [https://github.com/GustBusq/sistema-bancario-python.git](https://github.com/GustBusq/sistema-bancario-python.git)
    ```

2.  **Navegue at√© o Diret√≥rio do Projeto:**
    Entre na pasta do projeto clonado:
    ```bash
    cd sistema-bancario-python
    ```

3.  **Organize os Arquivos (Verifica√ß√£o de Estrutura):**
    Certifique-se de que seus arquivos est√£o distribu√≠dos da seguinte forma na pasta raiz do projeto (`sistema-bancario-python/`):

    ```
    sistema-bancario-python/
    ‚îú‚îÄ‚îÄ main.py
    ‚îú‚îÄ‚îÄ cliente.py
    ‚îú‚îÄ‚îÄ validacoes.py
    ‚îú‚îÄ‚îÄ data_manager.py
    ‚îî‚îÄ‚îÄ operacoes_bancarias.py
    ```

4.  **Execute o Script Principal:**
    No seu terminal, dentro da pasta raiz do projeto (`sistema-bancario-python/`), execute o script principal:
    ```bash
    python main.py
    ```

5.  **Interaja com o Menu:**
    O sistema exibir√° um menu interativo no console, permitindo que voc√™ escolha e realize as opera√ß√µes banc√°rias desejadas.

---

## üìÇ Estrutura de Pastas (Modulariza√ß√£o)

O projeto est√° organizado em m√≥dulos para facilitar a manuten√ß√£o, legibilidade e escalabilidade:

* **`main.py`**: O ponto de entrada principal do sistema. Respons√°vel por carregar os dados iniciais, exibir o menu de op√ß√µes para o usu√°rio e orquestrar as chamadas para as fun√ß√µes nas outras √°reas do sistema.
* **`cliente.py`**: Define a **classe `Cliente`**. Esta classe representa um cliente banc√°rio e encapsula suas propriedades (nome, CPF, telefone, saldo, hist√≥rico de transa√ß√µes) e m√©todos relacionados √†s opera√ß√µes banc√°rias b√°sicas (`depositar`, `sacar`, `transferir`, etc.).
* **`validacoes.py`**: Cont√©m fun√ß√µes utilit√°rias para valida√ß√£o e formata√ß√£o de dados de entrada, como o CPF e o telefone, garantindo que os dados inseridos pelo usu√°rio estejam no formato correto e sejam v√°lidos.
* **`data_manager.py`**: Respons√°vel por gerenciar a **leitura e grava√ß√£o dos dados dos clientes** em um arquivo JSON (`clientes.json`), garantindo a persist√™ncia das informa√ß√µes.
* **`operacoes_bancarias.py`**: Cont√©m as fun√ß√µes que implementam as opera√ß√µes banc√°rias e de gerenciamento que interagem diretamente com a lista de clientes (e suas contas), como listagem, consulta, relat√≥rios, etc.

---

## üìÑ Licen√ßa

Este projeto est√° licenciado sob a **Licen√ßa MIT**. Para mais detalhes, consulte o arquivo `LICENSE` no reposit√≥rio.

---

## üìß Contato

Se tiver alguma d√∫vida, sugest√£o ou quiser entrar em contato, pode me encontrar em:
* **GitHub:** [GustBusq](https://github.com/GustBusq)
* **LinkedIn** [Gustavo Buarque](http://www.linkedin.com/in/gustavobuarque19)
* **whatsapp/Numero** - (11) 96972-8712
